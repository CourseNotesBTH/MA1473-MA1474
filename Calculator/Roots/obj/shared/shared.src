; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\..\SRC\SHARED\SHARED.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include "shared.h"
;    2	
;    3	uint8_t print(int8_t row, int8_t column, const char *text) {
_print:
	CALL	__frameset0
;    4	  os_SetCursorPos(row, column);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;    5	  os_PutStrFull(text);
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;    6	
;    7	  if (row++ == CHARACTER_HEIGHT - 1) {
	LD	A,(IX+6)
	INC	(IX+6)
	CP	A,8
	JR	NZ,L_7
;    8	    os_SetCursorPos(CHARACTER_HEIGHT, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,9
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;    9	    os_PutStrFull("Continue...");
	LD	BC,L__1
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;   10	    /* Wait for a key to be pressed */
;   11	    while (!os_GetCSC());
L_2:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_2
;   12	    row = 0;
	LD	(IX+6),0
;   13	    os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;   14	  }
L_7:
;   15	
;   16	  return row;
	LD	A,(IX+6)
;   17	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _print ***************************
;Name                         Addr/Register   Size   Type
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;text                                 IX+12      3   parameter
;column                                IX+9      1   parameter
;row                                   IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"Continue..."
	DB	0
	SEGMENT CODE
;   18	
;   19	uint8_t printLine(int8_t row, const char *text) {
_printLine:
	CALL	__frameset0
;   20	  return print(row, 0, text);
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;   21	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printLine ***************************
;Name                         Addr/Register   Size   Type
;_print                              IMPORT  -----   function
;text                                  IX+9      3   parameter
;row                                   IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;   22	
;   23	void clearFromLeft(uint8_t rows, const char* clearString) {
_clearFromLeft:
	LD	HL,-1
	CALL	__frameset
;   24	  uint8_t row = 0;
;   25	
;   26	  for (row = 0; row < rows; row++)
	LD	(IX+-1),0
	JR	L_13
L_11:
;   27	    print(row, 0, clearString);
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
L_13:
	LD	A,(IX+-1)
	CP	A,(IX+6)
	JR	C,L_11
;   28	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _clearFromLeft ***************************
;Name                         Addr/Register   Size   Type
;_print                              IMPORT  -----   function
;row                                   IX-1      1   variable
;clearString                           IX+9      3   parameter
;rows                                  IX+6      1   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


;   29	
;   30	uint32_t ipow(uint32_t base, uint32_t exponent)
;   31	{
_ipow:
	LD	HL,-4
	CALL	__frameset
;   32	  uint32_t result = 1;
	LD	BC,1
	LD	(IX+-4),BC
	XOR	A,A
	LD	(IX+-1),A
;   33	  while (exponent)
	JR	L_17
L_18:
;   34	  {
;   35	    if (exponent & 1)
	LD	A,(IX+12)
	AND	A,1
	UEXT	HL
	LD	L,A
	XOR	A,A
	LD	E,H
	CALL	__lcmpu
	JR	Z,L_16
;   36	        result *= base;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__lmulu
	LD	(IX+-4),HL
	LD	(IX+-1),E
L_16:
;   37	    exponent >>= 1;
	LD	BC,(IX+12)
	LD	A,(IX+15)
	LD	L,1
	CALL	__lshru
	LD	(IX+12),BC
	LD	(IX+15),A
;   38	    base *= base;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lmulu
	LD	(IX+6),HL
	LD	(IX+9),E
;   39	  }
L_17:
	LD	HL,(IX+12)
	LD	E,(IX+15)
	LD	BC,0
	XOR	A,A
	CALL	__lcmpu
	JR	NZ,L_18
;   40	
;   41	  return result;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
;   42	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ipow ***************************
;Name                         Addr/Register   Size   Type
;result                                IX-4      4   variable
;exponent                             IX+12      4   parameter
;base                                  IX+6      4   parameter


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


;   43	
;   44	void reverse(char *string, int length)
;   45	{
_reverse:
	LD	HL,-9
	CALL	__frameset
;   46	    int i = 0, j = length - 1, temp;
	LD	BC,0
	LD	(IX+-3),BC
	LD	BC,(IX+9)
	DEC	BC
	LD	(IX+-6),BC
;   47	    while (i < j)
	JR	L_23
L_24:
;   48	    {
;   49	        temp = string[i];
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	(IX+-9),HL
;   50	        string[i++] = string[j];
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   51	        string[j--] = temp;
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(IX+-9)
	LD	(HL),A
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
;   52	    }
L_23:
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_24
;   53	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _reverse ***************************
;Name                         Addr/Register   Size   Type
;temp                                  IX-9      3   variable
;j                                     IX-6      3   variable
;i                                     IX-3      3   variable
;length                                IX+9      3   parameter
;string                                IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


;   54	
;   55	int ultoa(uint32_t value, char *string)
;   56	{
_ultoa:
	LD	HL,-3
	CALL	__frameset
;   57	  int i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;   58	  while (value)
	JR	L_27
L_28:
;   59	  {
;   60	      string[i++] = (value % 10) + '0';
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	A,48
	CALL	__ladd_b
	LD	BC,HL
	LD	HL,(IX+12)
	LD	DE,(IX+-3)
	ADD	HL,DE
	LD	(HL),C
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   61	      value = value / 10;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	(IX+6),HL
	LD	(IX+9),E
;   62	  }
L_27:
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,0
	XOR	A,A
	CALL	__lcmpu
	JR	NZ,L_28
;   63	
;   64	  reverse(string, i);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_reverse
	POP	BC
	POP	BC
;   65	  string[i] = '\0';
	LD	BC,(IX+-3)
	LD	HL,(IX+12)
	ADD	HL,BC
	LD	(HL),0
;   66	  return i;
	LD	HL,(IX+-3)
;   67	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ultoa ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;string                               IX+12      3   parameter
;value                                 IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _os_GetCSC:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_SetCursorPos:ROM
	XREF __lcmpu:ROM
	XREF __ldivu:ROM
	XREF __lmulu:ROM
	XREF __lremu:ROM
	XREF __lshru:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __ladd_b:ROM
	XDEF _ultoa
	XDEF _reverse
	XDEF _ipow
	XDEF _clearFromLeft
	XDEF _printLine
	XDEF _print
	END
