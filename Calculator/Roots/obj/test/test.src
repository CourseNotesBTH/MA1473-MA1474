; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\..\SRC\TEST\TEST.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include "test.h"
;    2	
;    3	#include "../shared/shared.h"
;    4	
;    5	void handleTest() {
_handleTest:
	LD	HL,-80
	CALL	__frameset
;    6	  char str[CHARACTER_WIDTH];
;    7	  char str1[CHARACTER_WIDTH];
;    8	  char input[INPUT_SIZE];
;    9	
;   10	  /* number to test, room, exponent, found "roots" */
;   11	  uint24_t x = 0, n = 0, k = 1, ones = 0;
	LD	BC,0
	LD	(IX+-7),BC
	LD	(IX+-10),BC
	LD	(IX+-13),BC
;   12	  uint32_t temp1 = 0, temp2 = 0;
	LD	(IX+-17),BC
	XOR	A,A
	LD	(IX+-14),A
;   13	
;   14	  uint8_t row = 0;
	LD	(IX+-1),0
;   15	
;   16	  os_GetStringInput("Enter number to test x: ", input, sizeof input);
	LD	BC,7
	PUSH	BC
	PEA	IX+-28
	LD	BC,L__0
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
;   17	  x = atoi(input);
	PEA	IX+-28
	CALL	_atoi
	POP	BC
	LD	(IX+-7),HL
;   18	  os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;   19	  os_GetStringInput("Enter room to test n: ", input, sizeof input);
	LD	BC,7
	PUSH	BC
	PEA	IX+-28
	LD	BC,L__1
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
;   20	  n = atoi(input);
	PEA	IX+-28
	CALL	_atoi
	POP	BC
	LD	(IX+-10),HL
;   21	  os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;   22	
;   23	  for (k = 1; k <= n; k++)Â {
	LD	BC,1
	LD	(IX+-4),BC
	JR	L_11
L_9:
;   24	    temp1 = ipow(x, k);
	LD	BC,(IX+-4)
	LD	DE,BC
	XOR	A,A
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	LD	BC,(IX+-7)
	LD	DE,BC
	XOR	A,A
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_ipow
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-17),HL
	LD	(IX+-14),E
;   25	    temp2 = temp1 % n;
	LD	BC,(IX+-10)
	LD	HL,(IX+-17)
	LD	E,(IX+-14)
	XOR	A,A
	CALL	__lremu
	LD	(IX+-21),HL
	LD	(IX+-18),E
;   26	    if (temp2 == 1)
	LD	HL,(IX+-21)
	LD	E,(IX+-18)
	LD	BC,1
	XOR	A,A
	CALL	__lcmpu
	JR	NZ,L_8
;   27	      ones++;
	LD	BC,(IX+-13)
	INC	BC
	LD	(IX+-13),BC
L_8:
;   28	    sprintf(str, "%u^%u=", x, k);
	LD	BC,(IX+-4)
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,L__3
	PUSH	BC
	PEA	IX+-54
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   29	    ultoa(temp1, str1);
	PEA	IX+-80
	LD	C,(IX+-14)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-17)
	PUSH	BC
	CALL	_ultoa
	POP	BC
	POP	BC
	POP	BC
;   30	    strcat(str, str1);
	PEA	IX+-80
	PEA	IX+-54
	CALL	_strcat
	POP	BC
	POP	BC
;   31	    sprintf(str1, "=%u", temp2);
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	BC,L__4
	PUSH	BC
	PEA	IX+-80
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   32	    strcat(str, str1);
	PEA	IX+-80
	PEA	IX+-54
	CALL	_strcat
	POP	BC
	POP	BC
;   33	    row = printLine(row, str);
	PEA	IX+-54
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_printLine
	POP	BC
	POP	BC
	LD	(IX+-1),A
	LD	BC,(IX+-4)
	INC	BC
	LD	(IX+-4),BC
;   34	  }
L_11:
	LD	BC,(IX+-4)
	LD	HL,(IX+-10)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_9
;   35	
;   36	  if (ones == 1) {
	LD	BC,1
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_14
;   37	    sprintf(str, "%u is a root in Z%u", x, n);
	LD	BC,(IX+-10)
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	PEA	IX+-54
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   38	    row = printLine(row, str);
	PEA	IX+-54
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_printLine
	POP	BC
	POP	BC
	LD	(IX+-1),A
;   39	  } else {
	JR	L_16
L_14:
;   40	    sprintf(str, "%u is not a root in Z%u", x, n);
	LD	BC,(IX+-10)
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	PEA	IX+-54
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   41	    row = printLine(row, str);
	PEA	IX+-54
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_printLine
	POP	BC
	POP	BC
	LD	(IX+-1),A
;   42	  }
;   43	}
L_16:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _handleTest ***************************
;Name                         Addr/Register   Size   Type
;_printLine                          IMPORT  -----   function
;_strcat                             IMPORT  -----   function
;_ultoa                              IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;_ipow                               IMPORT  -----   function
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;_atoi                               IMPORT  -----   function
;_os_GetStringInput                  IMPORT  -----   function
;str1                                 IX-80     26   variable
;str                                  IX-54     26   variable
;input                                IX-28      7   variable
;temp2                                IX-21      4   variable
;temp1                                IX-17      4   variable
;ones                                 IX-13      3   variable
;n                                    IX-10      3   variable
;x                                     IX-7      3   variable
;k                                     IX-4      3   variable
;row                                   IX-1      1   variable


; Stack Frame Size: 86 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__0:
	DB	"Enter number to test x: "
	DB	0
L__1:
	DB	"Enter room to test n: "
	DB	0
L__3:
	DB	"%u^%u="
	DB	0
L__4:
	DB	"=%u"
	DB	0
L__7:
	DB	"%u is a root in Z%u"
	DB	0
L__8:
	DB	"%u is not a root in Z%u"
	DB	0
	XREF _ultoa:ROM
	XREF _ipow:ROM
	XREF _printLine:ROM
	XREF _strcat:ROM
	XREF _atoi:ROM
	XREF _sprintf:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _os_GetStringInput:ROM
	XREF __lcmpu:ROM
	XREF __lremu:ROM
	XREF __frameset:ROM
	XDEF _handleTest
	END
