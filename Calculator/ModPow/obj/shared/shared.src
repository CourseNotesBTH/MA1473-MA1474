; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\..\SRC\SHARED\SHARED.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include "shared.h"
;    2	
;    3	uint8_t print(int8_t row, int8_t column, const char *text) {
_print:
	CALL	__frameset0
;    4	  os_SetCursorPos(row, column);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+6)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;    5	  os_PutStrFull(text);
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;    6	
;    7	  if (row++ == CHARACTER_HEIGHT - 1) {
	LD	A,(IX+6)
	INC	(IX+6)
	CP	A,8
	JR	NZ,L_7
;    8	    os_SetCursorPos(CHARACTER_HEIGHT, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,9
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
;    9	    os_PutStrFull("Continue...");
	LD	BC,L__1
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
;   10	    /* Wait for a key to be pressed */
;   11	    while (!os_GetCSC());
L_2:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_2
;   12	    row = 0;
	LD	(IX+6),0
;   13	    os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;   14	  }
L_7:
;   15	
;   16	  return row;
	LD	A,(IX+6)
;   17	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _print ***************************
;Name                         Addr/Register   Size   Type
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;text                                 IX+12      3   parameter
;column                                IX+9      1   parameter
;row                                   IX+6      1   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"Continue..."
	DB	0
	SEGMENT CODE
;   18	
;   19	uint8_t printLine(int8_t row, const char *text) {
_printLine:
	CALL	__frameset0
;   20	  return print(row, 0, text);
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+6)
	LD	B,0
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;   21	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printLine ***************************
;Name                         Addr/Register   Size   Type
;_print                              IMPORT  -----   function
;text                                  IX+9      3   parameter
;row                                   IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;   22	
;   23	void clearFromLeft(uint8_t rows, const char* clearString) {
_clearFromLeft:
	LD	HL,-1
	CALL	__frameset
;   24	  uint8_t row = 0;
;   25	
;   26	  for (row = 0; row < rows; row++)
	LD	(IX+-1),0
	JR	L_13
L_11:
;   27	    print(row, 0, clearString);
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
L_13:
	LD	A,(IX+-1)
	CP	A,(IX+6)
	JR	C,L_11
;   28	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _clearFromLeft ***************************
;Name                         Addr/Register   Size   Type
;_print                              IMPORT  -----   function
;row                                   IX-1      1   variable
;clearString                           IX+9      3   parameter
;rows                                  IX+6      1   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


;   29	
;   30	void moduloExponent(uint24_t base, uint24_t exponent, uint24_t modulo) {
_moduloExponent:
	LD	HL,-78
	CALL	__frameset
;   31	  char str[CHARACTER_WIDTH];
;   32	  char str1[CHARACTER_WIDTH];
;   33	  int *powers = NULL;
	LD	BC,0
	LD	(IX+-10),BC
;   34	
;   35	  uint32_t temp1, temp2, temp3;
;   36	
;   37	  /* highest power of two lower than n */
;   38	  uint8_t maxExponent = 1;
	LD	(IX+-7),1
;   39	  int8_t i = 0;
;   40	
;   41	  uint8_t row = 0;
	LD	(IX+-2),0
;   42	
;   43	  maxExponent = floor(log(exponent) / log(2));
	LD	BC,(IX+9)
	XOR	A,A
	CALL	__ultof
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_log
	POP	BC
	POP	BC
	LD	C,64
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	(IX+-77),HL
	LD	A,E
	LD	(IX+-78),A
	CALL	_log
	LD	A,(IX+-78)
	POP	BC
	POP	BC
	LD	BC,(IX+-77)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-7),C
;   44	  powers = (int*) malloc(maxExponent * sizeof(uint32_t));
	LD	A,(IX+-7)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	CALL	_malloc
	POP	BC
	LD	(IX+-10),HL
;   45	
;   46	  temp1 = base % modulo;
	LD	HL,(IX+6)
	LD	BC,(IX+12)
	CALL	__iremu
	LD	(IX+-14),HL
	XOR	A,A
	LD	(IX+-11),A
;   47	  powers[0]Â = temp1;
	LD	BC,HL
	LD	HL,(IX+-10)
	LD	(HL),BC
;   48	  sprintf(str, "%u^%u=%u=%u", base, 1, base, temp1);
	LD	C,(IX+-11)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-14)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	PEA	IX+-48
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   49	  row = printLine(row, str);
	PEA	IX+-48
	LD	BC,0
	PUSH	BC
	CALL	_printLine
	POP	BC
	POP	BC
	LD	(IX+-2),A
;   50	
;   51	  /* Calculate simplified products and print each step */
;   52	  for (i = 1; i <= maxExponent; i++) {
	LD	(IX+-1),1
	JR	L_18
L_16:
;   53	    temp1 = ipow(2, i);
	LD	A,(IX+-1)
	SEXT	HL
	LD	C,H
	LD	B,0
	LD	L,(IX+-1)
	PUSH	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_ipow
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-14),HL
	LD	(IX+-11),E
;   54	    temp2 = ipow(powers[i - 1], 2);
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	DEC	BC
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,(IX+-10)
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_ipow
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-18),HL
	LD	(IX+-15),E
;   55	    temp3 = temp2 % modulo;
	LD	BC,(IX+12)
	LD	HL,(IX+-18)
	LD	E,(IX+-15)
	XOR	A,A
	CALL	__lremu
	LD	(IX+-6),HL
	LD	(IX+-3),E
;   56	    powers[i] = temp3;
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,(IX+-10)
	ADD	HL,BC
	LD	BC,(IX+-6)
	LD	(HL),BC
;   57	
;   58	    sprintf(str, "%u^%u=", base, temp1);
	LD	C,(IX+-11)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-14)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	PEA	IX+-48
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   59	    ultoa(temp2, str1);
	PEA	IX+-74
	LD	C,(IX+-15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_ultoa
	POP	BC
	POP	BC
	POP	BC
;   60	    strcat(str, str1);
	PEA	IX+-74
	PEA	IX+-48
	CALL	_strcat
	POP	BC
	POP	BC
;   61	    sprintf(str1, "=%u", temp3);
	LD	C,(IX+-3)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	PEA	IX+-74
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   62	    strcat(str, str1);
	PEA	IX+-74
	PEA	IX+-48
	CALL	_strcat
	POP	BC
	POP	BC
;   63	
;   64	    row = printLine(row, str);
	PEA	IX+-48
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	CALL	_printLine
	POP	BC
	POP	BC
	LD	(IX+-2),A
	INC	(IX+-1)
;   65	  }
L_18:
	LD	A,(IX+-7)
	CP	A,(IX+-1)
	JP	P,L_16
;   66	
;   67	  /* Calculate exponents needed */
;   68	  temp1 = 0; /* current exponent */
	LD	BC,0
	LD	(IX+-14),BC
	XOR	A,A
	LD	(IX+-11),A
;   69	  temp3 = 1; /* current result */
	LD	BC,1
	LD	(IX+-6),BC
	XOR	A,A
	LD	(IX+-3),A
;   70	  sprintf(str, "%u=", exponent);
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	PEA	IX+-48
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;   71	  for (i = maxExponent; i >= 0; i--) {
	LD	A,(IX+-7)
	LD	(IX+-1),A
	JR	L_27
L_25:
;   72	    temp2 = ipow(2, i);
	LD	A,(IX+-1)
	SEXT	HL
	LD	C,H
	LD	B,0
	LD	L,(IX+-1)
	PUSH	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_ipow
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-18),HL
	LD	(IX+-15),E
;   73	    if (temp1 + temp2 <= exponent) {
	LD	HL,(IX+-18)
	LD	E,(IX+-15)
	LD	BC,(IX+-14)
	LD	A,(IX+-11)
	CALL	__ladd
	LD	(IX+-22),HL
	LD	(IX+-19),E
	XOR	A,A
	LD	E,A
	LD	A,(IX+-19)
	LD	HL,(IX+9)
	LD	BC,(IX+-22)
	CALL	__lcmpu
	JR	C,L_26
;   74	      temp1 += temp2;
	LD	BC,(IX+-22)
	LD	A,(IX+-19)
	LD	(IX+-14),BC
	LD	(IX+-11),A
;   75	      if (temp3 == 1)
	LD	HL,(IX+-6)
	LD	E,(IX+-3)
	LD	BC,1
	XOR	A,A
	CALL	__lcmpu
	JR	NZ,L_22
;   76	        sprintf(str, "%s%u", str, temp2);
	LD	C,(IX+-15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	PEA	IX+-48
	LD	BC,L__14
	PUSH	BC
	PEA	IX+-48
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   77	      else
	JR	L_23
L_22:
;   78	        sprintf(str, "%s+%u", str, temp2);
	LD	C,(IX+-15)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	PEA	IX+-48
	LD	BC,L__15
	PUSH	BC
	PEA	IX+-48
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_23:
;   79	      temp3 = (temp3 * powers[i]) % modulo;
	LD	A,(IX+-1)
	SEXT	HL
	LD	L,(IX+-1)
	LD	BC,HL
	LD	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	OR	A,A
	SBC	HL,BC
	LD	BC,(IX+-10)
	ADD	HL,BC
	LD	BC,(HL)
	CALL	__itol
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+-6)
	LD	A,(IX+-3)
	CALL	__lmulu
	LD	BC,(IX+12)
	XOR	A,A
	CALL	__lremu
	LD	(IX+-6),HL
	LD	(IX+-3),E
;   80	    }
;   81	  }
L_26:
	DEC	(IX+-1)
L_27:
	LD	A,(IX+-1)
	OR	A,A
	JP	P,L_25
;   82	  row = printLine(row, str);
	PEA	IX+-48
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	CALL	_printLine
	POP	BC
	POP	BC
	LD	(IX+-2),A
;   83	
;   84	  sprintf(str, "%u^%u=%u", base, exponent, temp3);
	LD	C,(IX+-3)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,L__17
	PUSH	BC
	PEA	IX+-48
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   85	  row = printLine(row, str);
	PEA	IX+-48
	LD	C,(IX+-2)
	LD	B,0
	PUSH	BC
	CALL	_printLine
	POP	BC
	POP	BC
	LD	(IX+-2),A
;   86	
;   87	  free(powers);
	LD	BC,(IX+-10)
	PUSH	BC
	CALL	_free
	POP	BC
;   88	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _moduloExponent ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;_strcat                             IMPORT  -----   function
;_ultoa                              IMPORT  -----   function
;_ipow                               IMPORT  -----   function
;_printLine                          IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_log                                IMPORT  -----   function
;_floor                              IMPORT  -----   function
;str1                                 IX-74     26   variable
;str                                  IX-48     26   variable
;G_0                                  IX-22      4   variable
;temp2                                IX-18      4   variable
;temp1                                IX-14      4   variable
;powers                               IX-10      3   variable
;maxExponent                           IX-7      1   variable
;temp3                                 IX-6      4   variable
;row                                   IX-2      1   variable
;i                                     IX-1      1   variable
;modulo                               IX+12      3   parameter
;exponent                              IX+9      3   parameter
;base                                  IX+6      3   parameter


; Stack Frame Size: 93 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__7:
	DB	"%u^%u=%u=%u"
	DB	0
L__8:
	DB	"%u^%u="
	DB	0
L__9:
	DB	"=%u"
	DB	0
L__11:
	DB	"%u="
	DB	0
L__14:
	DB	"%s%u"
	DB	0
L__15:
	DB	"%s+%u"
	DB	0
L__17:
	DB	"%u^%u=%u"
	DB	0
	SEGMENT CODE
;   89	
;   90	uint32_t ipow(uint32_t base, uint32_t exponent)
;   91	{
_ipow:
	LD	HL,-4
	CALL	__frameset
;   92	  uint32_t result = 1;
	LD	BC,1
	LD	(IX+-4),BC
	XOR	A,A
	LD	(IX+-1),A
;   93	  while (exponent)
	JR	L_32
L_33:
;   94	  {
;   95	    if (exponent & 1)
	LD	A,(IX+12)
	AND	A,1
	UEXT	HL
	LD	L,A
	XOR	A,A
	LD	E,H
	CALL	__lcmpu
	JR	Z,L_31
;   96	        result *= base;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__lmulu
	LD	(IX+-4),HL
	LD	(IX+-1),E
L_31:
;   97	    exponent >>= 1;
	LD	BC,(IX+12)
	LD	A,(IX+15)
	LD	L,1
	CALL	__lshru
	LD	(IX+12),BC
	LD	(IX+15),A
;   98	    base *= base;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__lmulu
	LD	(IX+6),HL
	LD	(IX+9),E
;   99	  }
L_32:
	LD	HL,(IX+12)
	LD	E,(IX+15)
	LD	BC,0
	XOR	A,A
	CALL	__lcmpu
	JR	NZ,L_33
;  100	
;  101	  return result;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
;  102	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ipow ***************************
;Name                         Addr/Register   Size   Type
;result                                IX-4      4   variable
;exponent                             IX+12      4   parameter
;base                                  IX+6      4   parameter


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


;  103	
;  104	void reverse(char *string, int length)
;  105	{
_reverse:
	LD	HL,-9
	CALL	__frameset
;  106	    int i = 0, j = length - 1, temp;
	LD	BC,0
	LD	(IX+-3),BC
	LD	BC,(IX+9)
	DEC	BC
	LD	(IX+-6),BC
;  107	    while (i < j)
	JR	L_38
L_39:
;  108	    {
;  109	        temp = string[i];
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	(IX+-9),HL
;  110	        string[i++] = string[j];
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  111	        string[j--] = temp;
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(IX+-9)
	LD	(HL),A
	LD	BC,(IX+-6)
	DEC	BC
	LD	(IX+-6),BC
;  112	    }
L_38:
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__23
	JP	PE,L_39
	JR	L__24
L__23:
	JP	PO,L_39
L__24:
;  113	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _reverse ***************************
;Name                         Addr/Register   Size   Type
;temp                                  IX-9      3   variable
;j                                     IX-6      3   variable
;i                                     IX-3      3   variable
;length                                IX+9      3   parameter
;string                                IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


;  114	
;  115	int ultoa(uint32_t value, char *string)
;  116	{
_ultoa:
	LD	HL,-3
	CALL	__frameset
;  117	  int i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  118	  while (value)
	JR	L_42
L_43:
;  119	  {
;  120	      string[i++] = (value % 10) + '0';
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,10
	XOR	A,A
	CALL	__lremu
	LD	A,48
	CALL	__ladd_b
	LD	BC,HL
	LD	HL,(IX+12)
	LD	DE,(IX+-3)
	ADD	HL,DE
	LD	(HL),C
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  121	      value = value / 10;
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,10
	XOR	A,A
	CALL	__ldivu
	LD	(IX+6),HL
	LD	(IX+9),E
;  122	  }
L_42:
	LD	HL,(IX+6)
	LD	E,(IX+9)
	LD	BC,0
	XOR	A,A
	CALL	__lcmpu
	JR	NZ,L_43
;  123	
;  124	  reverse(string, i);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_reverse
	POP	BC
	POP	BC
;  125	  string[i] = '\0';
	LD	BC,(IX+-3)
	LD	HL,(IX+12)
	ADD	HL,BC
	LD	(HL),0
;  126	  return i;
	LD	HL,(IX+-3)
;  127	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _ultoa ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;string                               IX+12      3   parameter
;value                                 IX+6      4   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


	XREF _strcat:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _sprintf:ROM
	XREF _floor:ROM
	XREF _log:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _os_GetCSC:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_SetCursorPos:ROM
	XREF __lcmpu:ROM
	XREF __ladd:ROM
	XREF __ldivu:ROM
	XREF __lmulu:ROM
	XREF __iremu:ROM
	XREF __lremu:ROM
	XREF __lshru:ROM
	XREF __fdiv:ROM
	XREF __ftol:ROM
	XREF __ultof:ROM
	XREF __itol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __ladd_b:ROM
	XDEF _ultoa
	XDEF _reverse
	XDEF _ipow
	XDEF _moduloExponent
	XDEF _clearFromLeft
	XDEF _printLine
	XDEF _print
	END
